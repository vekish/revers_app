/*!
 * jQuery.signiture.js v1.2.2
 * https://github.com/threadsuxx/jquery-signature
 * (c) 2014-2017 Nathan Ford <threadsuxx@gmail.com>
 * MIT License
 */

(function(factory) {
    if (typeof define === 'function' && define.amd) {
      define(['jquery'], factory);
    } else if (typeof module !== 'undefined' && module.exports) {
      module.exports = factory(require('jquery'));
    } else {
      factory(jQuery);
    }
  }(function($) {
    'use strict';
  
    $.fn.signature = function(options) {
      var settings = $.extend({}, $.fn.signature.defaults, options);
  
      return this.each(function() {
        var $this = $(this),
            instance = $this.data('signature');
  
        if (!instance) {
          $this.data('signature', new Signature(this, settings));
        }
      });
    };
  
    $.fn.signature.defaults = {
      syncField: null,
      syncFormat: 'PNG',
      bgColor: '#ffffff',
      color: '#000000',
      drawOnly: false,
      lineWidth: 0,
      clear: 'Clear',
      errorMessage: "Signatur ist erforderlich"
    };
  
    function Signature(element, options) {
      this.$el = $(element);
      this.options = options;
      this.$canvas = $('<canvas></canvas>').appendTo(this.$el);
      this.$canvasDiv = this.$canvas.parent();
      this.$clearButton = $('<button type="button"></button>').text(this.options.clear).appendTo(this.$canvasDiv);
      this._init();
    }
  
    Signature.prototype = {
      _init: function() {
        this.$canvas.attr({
          width: this.$canvasDiv.width(),
          height: this.$canvasDiv.height()
        });
  
        this.context = this.$canvas[0].getContext('2d');
  
        this._initEvents();
        this.clearCanvas();
      },
  
      _initEvents: function() {
        var self = this;
  
        this.$clearButton.on('click', function(e) {
          e.preventDefault();
          self.clearCanvas();
        });
  
        this.$canvas.on('mousedown touchstart', function(e) {
          if (self.options.drawOnly && !self.mouseButtonDown) {
            e.preventDefault();
            self.clearCanvas();
          }
          self.mouseButtonDown = true;
        });
  
        $(document).on('mouseup touchend', function(e) {
          self.mouseButtonDown = false;
          self._sync();
        });
  
        this.$canvas.on('mousemove touchmove', function(e) {
          if (self.mouseButtonDown) {
            self.draw(e);
          }
        });
      },
  
      clearCanvas: function() {
        this.context.fillStyle = this.options.bgColor;
        this.context.strokeStyle = this.options.color;
        this.context.lineWidth = this.options.lineWidth;
        this.context.lineCap = 'round';
  
        this.context.fillRect(0, 0, this.$canvas[0].width, this.$canvas[0].height);
      },
  
      draw: function(e) {
        var offset = this.$canvas.offset(),
            x = (e.pageX || e.originalEvent.touches[0].pageX) - offset.left,
            y = (e.pageY || e.originalEvent.touches[0].pageY) - offset.top;
  
        this.context.beginPath();
        this.context.moveTo(this.lastX, this.lastY);
        this.context.lineTo(x, y);
        this.context.stroke();
        this.context.closePath();
  
        this.lastX = x;
        this.lastY = y;
      },
  
      _sync: function() {
        if (this.options.syncField) {
          var format = this.options.syncFormat.toLowerCase(),
              data = this.$canvas[0].toDataURL('image/' + format);
  
          $(this.options.syncField).val(data);
        }
      }
    };
  }));
  